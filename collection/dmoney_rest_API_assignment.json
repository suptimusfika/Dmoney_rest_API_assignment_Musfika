{
	"info": {
		"_postman_id": "85bb6da9-1ba5-4fd1-98b3-424da98a0416",
		"name": "dmoney_rest_API_assignment",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27409335",
		"_collection_link": "https://lunar-shadow-134048.postman.co/workspace/SDET~6b0efa7c-11ac-4414-b7f3-c7684b5554be/collection/27409335-85bb6da9-1ba5-4fd1-98b3-424da98a0416?action=share&creator=27409335&source=collection_link"
	},
	"item": [
		{
			"name": "Admin Login",
			"item": [
				{
					"name": "Admin login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"token\",jsonData.token)\r",
									"//pm.environment.set(\"token\",jsonData.token)\r",
									"\r",
									"pm.test(\"Test-1:Login successfull\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Login successfully\");\r",
									"});\r",
									"pm.test(\"Test-2:Status code is correct\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Test-3:If role is showing\", function () {\r",
									"     var jsonData = pm.response.json();\r",
									"     pm.expect(jsonData.role).not.equal(null);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"admin@roadtocareer.net\",\r\n    \"password\":\"1234\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin can't login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Test-1:Login unsuccessful due to wrong password\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Password incorrect\");\r",
									"});\r",
									"pm.test(\"Test-2:Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"admin@roadtocareer.net\",\r\n    \"password\":\"12345\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Agent Creation",
			"item": [
				{
					"name": "Create agent",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var prefix=\"01501\";\r",
									"var nid_prefix=\"1100\";\r",
									"var randomNumber=_.random(100000,999999)\r",
									"var user_phone_number=prefix+ randomNumber;\r",
									"var user_nid=nid_prefix+randomNumber;\r",
									"pm.collectionVariables.set(\"phone_number\",user_phone_number)\r",
									"pm.collectionVariables.set(\"nid\",user_nid)\r",
									"pm.environment.set(\"phone_number\",user_phone_number)\r",
									"pm.environment.set(\"nid\",user_nid)\r",
									"console.log(user_phone_number)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Test-1:Agent Creation Successful\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"User created\");\r",
									"});\r",
									"pm.test(\"Test-2:Status code is correct\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "ROADTOSDET",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"{{$randomFullName}}\",\r\n    \"email\":\"{{$randomEmail}}\",\r\n    \"password\":\"1234\",\r\n    \"phone_number\":\"{{phone_number}}\",\r\n    \"nid\":\"{{nid}}\",\r\n    \"role\":\"Agent\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Duplicate Agent",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Test-1:Agent Creation Unsuccessful\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"User already exists\");\r",
									"});\r",
									"pm.test(\"Test-2:Status code is correct\", function () {\r",
									"    pm.response.to.have.status(208);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "ROADTOSDET",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"Tabitha Howell\",\r\n    \"email\":\"Fay47@gmail.com\",\r\n    \"password\":\"1234\",\r\n    \"phone_number\":\"01501386828\",\r\n    \"nid\":\"1100386828\",\r\n    \"role\":\"Agent\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Customer 1 Creation",
			"item": [
				{
					"name": "Create Customer 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var prefix_1=\"01601\";\r",
									"var nid_prefix_1=\"1200\";\r",
									"var randomNumber=_.random(100000,999999)\r",
									"var user_phone_number_1=prefix_1+ randomNumber;\r",
									"var user_nid_1=nid_prefix_1+randomNumber;\r",
									"pm.collectionVariables.set(\"phone_number_1\",user_phone_number_1)\r",
									"pm.collectionVariables.set(\"nid_1\",user_nid_1)\r",
									"//pm.environment.set(\"phone_number_1\",user_phone_number_1)\r",
									"//pm.environment.set(\"nid_1\",user_nid_1)\r",
									"//console.log(user_phone_number)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Test-1:Customer 1 Creation Successful\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"User created\");\r",
									"});\r",
									"pm.test(\"Test-2:Status code is correct\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "ROADTOSDET",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"{{$randomFullName}}\",\r\n    \"email\":\"{{$randomEmail}}\",\r\n    \"password\":\"1234\",\r\n    \"phone_number\":\"{{phone_number_1}}\",\r\n    \"nid\":\"{{nid_1}}\",\r\n    \"role\":\"Customer\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Duplicate Customer 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Test-1:Customer 1 Creation Unsuccessful\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"User already exists\");\r",
									"});\r",
									"pm.test(\"Test-2:Status code is correct\", function () {\r",
									"    pm.response.to.have.status(208);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "ROADTOSDET",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"Lela Auer\",\r\n    \"email\":\"Julianne.Adams68@hotmail.com\",\r\n    \"password\":\"1234\",\r\n    \"phone_number\":\"01601182191\",\r\n    \"nid\":\"1200182191\",\r\n    \"role\":\"Customer\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Customer 2 Creation",
			"item": [
				{
					"name": "Create Customer 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var prefix_2=\"01701\";\r",
									"var nid_prefix_2=\"1300\";\r",
									"var randomNumber=_.random(100000,999999)\r",
									"var user_phone_number_2=prefix_2+ randomNumber;\r",
									"var user_nid_2=nid_prefix_2+randomNumber;\r",
									"pm.collectionVariables.set(\"phone_number_2\",user_phone_number_2)\r",
									"pm.collectionVariables.set(\"nid_2\",user_nid_2)\r",
									"pm.environment.set(\"phone_number_2\",user_phone_number_2)\r",
									"pm.environment.set(\"nid_2\",user_nid_2)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Test-1:Customer 2 Creation Successful\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"User created\");\r",
									"});\r",
									"pm.test(\"Test-2:Status code is correct\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "ROADTOSDET",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"{{$randomFullName}}\",\r\n    \"email\":\"{{$randomEmail}}\",\r\n    \"password\":\"1234\",\r\n    \"phone_number\":\"{{phone_number_2}}\",\r\n    \"nid\":\"{{nid_2}}\",\r\n    \"role\":\"Customer\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Duplicate Customer 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Test-1:Customer 2 Creation Unsuccessful\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"User already exists\");\r",
									"});\r",
									"pm.test(\"Test-2:Status code is correct\", function () {\r",
									"    pm.response.to.have.status(208);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "ROADTOSDET",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"Olive Jast\",\r\n    \"email\":\"Lonzo.Klein@hotmail.com\",\r\n    \"password\":\"1234\",\r\n    \"phone_number\":\"01701224750\",\r\n    \"nid\":\"1300224750\",\r\n    \"role\":\"Customer\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Deposit to agent",
			"item": [
				{
					"name": "Deposit to Agent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Test-1:Deposit to Agent Successful\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Deposit successful\");\r",
									"});\r",
									"pm.test(\"Test-2:Status code is correct\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Test-3:trnxId is showing\", function () {\r",
									"     var jsonData = pm.response.json();\r",
									"     pm.expect(jsonData.trnxId).not.equal(null);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "ROADTOSDET",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\":\"SYSTEM\",\r\n    \"to_account\":\"{{phone_number}}\",\r\n    \"amount\":5000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/deposit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"deposit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deposit to Agent Unsuccessful",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Test-1:Deposit to Agent Unsuccessful due to exceeding maximum limit\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Minimum deposit amount 10 tk and maximum deposit amount 10000 tk\");\r",
									"});\r",
									"pm.test(\"Test-2:Status code is correct\", function () {\r",
									"    pm.response.to.have.status(208);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "ROADTOSDET",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\":\"SYSTEM\",\r\n    \"to_account\":\"{{phone_number}}\",\r\n    \"amount\":12000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/deposit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"deposit"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Deposit to Customer 1 by agent",
			"item": [
				{
					"name": "Deposit to Customer 1 by agent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Test-1:Deposit to Customer 1 by agent Successful\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Deposit successful\");\r",
									"});\r",
									"pm.test(\"Test-2:Status code is correct\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Test-3:trnxId is showing\", function () {\r",
									"     var jsonData = pm.response.json();\r",
									"     pm.expect(jsonData.trnxId).not.equal(null);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "ROADTOSDET",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\":\"{{phone_number}}\",\r\n    \"to_account\":\"{{phone_number_1}}\",\r\n    \"amount\":2000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/deposit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"deposit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unsuccessful Deposit to Customer 1 by agent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Test-1:Deposit to Agent Unsuccessful due to exceeding maximum limit\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Insufficient balance\");\r",
									"});\r",
									"pm.test(\"Test-2:Status code is correct\", function () {\r",
									"    pm.response.to.have.status(208);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "ROADTOSDET",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\":\"{{phone_number}}\",\r\n    \"to_account\":\"{{phone_number_1}}\",\r\n    \"amount\":12000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/deposit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"deposit"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Check Agent balance",
			"item": [
				{
					"name": "Check Agent Balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Test-1:Agent Balance is showing below\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"User balance\");\r",
									"});\r",
									"pm.test(\"Test-2:Agent Balance\", function () {\r",
									"     var jsonData = pm.response.json();\r",
									"     pm.expect(jsonData.balance).not.equal(null);\r",
									"});\r",
									"pm.test(\"Test-3:Status code is correct\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "ROADTOSDET",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/transaction/balance/{{phone_number}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"balance",
								"{{phone_number}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User can't Check Agent Balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Test-1:User does not have access\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test(\"Test-2:User is not authorized for this task\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var Message= jsonData.error.message;\r",
									"    pm.expect(Message).contains(\"Secret auth key validation failure!\")\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/transaction/balance/{{phone_number}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"balance",
								"{{phone_number}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Amount withdrawal from agent by Customer 1",
			"item": [
				{
					"name": "Withdraw Amount from agent by Customer 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Test-1:Successful amount withdrawal  by Customer 1 from agent\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Withdraw successful\");\r",
									"});\r",
									"pm.test(\"Test-2:Status code is correct\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Test-3:trnxId is showing\", function () {\r",
									"     var jsonData = pm.response.json();\r",
									"     pm.expect(jsonData.trnxId).not.equal(null);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "ROADTOSDET",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\":\"{{phone_number_1}}\",\r\n    \"to_account\":\"{{phone_number}}\",\r\n    \"amount\":100\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/withdraw",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"withdraw"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unsuccessful amount withdrawal  by Customer 1 from agent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Test-1:Unsuccessful amount withdrawal  by Customer 1 from agent due to insufficient balance\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Insufficient balance\");\r",
									"});\r",
									"pm.test(\"Test-2:Status code is correct\", function () {\r",
									"    pm.response.to.have.status(208);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "ROADTOSDET",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\":\"{{phone_number_1}}\",\r\n    \"to_account\":\"{{phone_number}}\",\r\n    \"amount\":12000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/withdraw",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"withdraw"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Check customer-1 Balance",
			"item": [
				{
					"name": "Check customer-1 Balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Test-1:Customer 1 Balance is showing below\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"User balance\");\r",
									"});\r",
									"pm.test(\"Test-2:Customer 1 Balance\", function () {\r",
									"     var jsonData = pm.response.json();\r",
									"     pm.expect(jsonData.balance).not.equal(null);\r",
									"});\r",
									"pm.test(\"Test-3:Status code is correct\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "ROADTOSDET",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/transaction/balance/{{phone_number_1}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"balance",
								"{{phone_number_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User can't Check customer-1 Balance",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Test-1:User does not have access\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test(\"Test-2:User is not authorized for this task\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var Message= jsonData.error.message;\r",
									"    pm.expect(Message).contains(\"Secret auth key validation failure!\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/transaction/balance/{{phone_number_1}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"balance",
								"{{phone_number_1}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Send Money to Customer 2",
			"item": [
				{
					"name": "Send Money to Customer 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Test-1:Successful send money to Customer 2 by Customer 1\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Send money successful\");\r",
									"});\r",
									"pm.test(\"Test-2:Status code is correct\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Test-3:trnxId is showing\", function () {\r",
									"     var jsonData = pm.response.json();\r",
									"     pm.expect(jsonData.trnxId).not.equal(null);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "ROADTOSDET",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\":\"{{phone_number_1}}\",\r\n    \"to_account\":\"{{phone_number_2}}\",\r\n    \"amount\":300\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/sendmoney",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"sendmoney"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unsuccessful Send Money to Customer 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Test-1:Unsuccessful Send Money to Customer 2 by Customer 1\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Insufficient balance\");\r",
									"});\r",
									"pm.test(\"Test-2:Status code is correct\", function () {\r",
									"    pm.response.to.have.status(208);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "ROADTOSDET",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\":\"{{phone_number_1}}\",\r\n    \"to_account\":\"{{phone_number_2}}\",\r\n    \"amount\":12000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/sendmoney",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"sendmoney"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Payment to merchant by Customer 2",
			"item": [
				{
					"name": "Payment to merchant by Customer 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Test-1:Payment Successful to merchant by Customer 2\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Payment successful\");\r",
									"});\r",
									"pm.test(\"Test-2:Status code is correct\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Test-3:trnxId is showing\", function () {\r",
									"     var jsonData = pm.response.json();\r",
									"     pm.expect(jsonData.trnxId).not.equal(null);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "ROADTOSDET",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\":\"{{phone_number_2}}\",\r\n    \"to_account\":\"01686606905\",\r\n    \"amount\":20\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/payment",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"payment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unsuccessful Payment to merchant by Customer 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Test-1:Unsuccessful payment due to insufficient balance\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Insufficient balance\");\r",
									"});\r",
									"pm.test(\"Test-2:Status code is correct\", function () {\r",
									"    pm.response.to.have.status(208);\r",
									"});\r",
									"pm.test(\"Test-3:check current balance\", function () {\r",
									"     var jsonData = pm.response.json();\r",
									"     pm.expect(jsonData.currentBalance).not.equal(null);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "ROADTOSDET",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\":\"{{phone_number_2}}\",\r\n    \"to_account\":\"01686606905\",\r\n    \"amount\":12000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/payment",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"payment"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Check customer-2 Balance",
			"item": [
				{
					"name": "Check customer-2 Balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Test-1:Customer 2 Balance is showing below\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"User balance\");\r",
									"});\r",
									"pm.test(\"Test-2:Customer 2 Balance\", function () {\r",
									"     var jsonData = pm.response.json();\r",
									"     pm.expect(jsonData.balance).not.equal(null);\r",
									"});\r",
									"pm.test(\"Test-3:Status code is correct\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "ROADTOSDET",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/transaction/balance/{{phone_number_2}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"balance",
								"{{phone_number_2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User can not Check customer-2 Balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Test-1:User does not have access\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test(\"Test-2:User is not authorized for this task\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var Message= jsonData.error.message;\r",
									"    pm.expect(Message).contains(\"Secret auth key validation failure!\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/transaction/balance/{{phone_number_2}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"balance",
								"{{phone_number_2}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Check customer-2 Statement",
			"item": [
				{
					"name": "Check customer-2 Statement",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Test-1:Customer 2 transaction list is showing\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Transaction list\");\r",
									"});\r",
									"pm.test(\"Test-2:Customer 2 transaction count\", function () {\r",
									"     var jsonData = pm.response.json();\r",
									"     pm.expect(jsonData.count).not.equal(null);\r",
									"});\r",
									"pm.test(\"Test-3:Status code is correct\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "ROADTOSDET",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/transaction/statement/{{phone_number_2}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"statement",
								"{{phone_number_2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User can't Check customer-2 Statement",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Test-1:User does not have access\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test(\"Test-2:User is not authorized for this task\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var Message= jsonData.error.message;\r",
									"    pm.expect(Message).contains(\"Secret auth key validation failure!\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/transaction/statement/{{phone_number_2}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"statement",
								"{{phone_number_2}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Check Merchant balance",
			"item": [
				{
					"name": "Check Merchant balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Test-1:Merchant Balance is showing below\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"User balance\");\r",
									"});\r",
									"pm.test(\"Test-2:Merchant Balance\", function () {\r",
									"     var jsonData = pm.response.json();\r",
									"     pm.expect(jsonData.balance).not.equal(null);\r",
									"});\r",
									"pm.test(\"Test-3:Status code is correct\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "ROADTOSDET",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/transaction/balance/01686606905",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"balance",
								"01686606905"
							]
						}
					},
					"response": []
				},
				{
					"name": "User can't Check Merchant balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Test-1:User does not have access\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test(\"Test-2:User is not authorized for this task\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var Message= jsonData.error.message;\r",
									"    pm.expect(Message).contains(\"Secret auth key validation failure!\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/transaction/statement/{{phone_number_2}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"statement",
								"{{phone_number_2}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://dmoney.roadtocareer.net",
			"type": "string"
		},
		{
			"key": "token",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFkbWluQHJvYWR0b2NhcmVlci5uZXQiLCJwYXNzd29yZCI6IjEyMzQiLCJpYXQiOjE2ODU1MDk5OTcsImV4cCI6MTY4NTUxMTc5N30.Ar6gZAAGxb1oci2mOx1eY_x8-5ZHXFVIDzwd9OGXr7M"
		},
		{
			"key": "phone_number",
			"value": "01501467777"
		},
		{
			"key": "nid",
			"value": "1100467777"
		},
		{
			"key": "phone_number_1",
			"value": "01601287145"
		},
		{
			"key": "nid_1",
			"value": "1200287145"
		},
		{
			"key": "phone_number_2",
			"value": "01701892579"
		},
		{
			"key": "nid_2",
			"value": "1300892579"
		}
	]
}